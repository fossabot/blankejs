[1mdiff --git a/love2d/lua/blanke/Blanke.lua b/love2d/lua/blanke/Blanke.lua[m
[1mindex 18b60a9..ffec4f8 100644[m
[1m--- a/love2d/lua/blanke/Blanke.lua[m
[1m+++ b/love2d/lua/blanke/Blanke.lua[m
[36m@@ -4,7 +4,6 @@[m [mfunction blanke_require(import)[m
 	return require(blanke_path..import)[m
 end[m
 [m
[31m-love.graphics.setDefaultFilter("nearest","nearest")[m
 [m
 blanke_require('Globals')[m
 blanke_require('Util')[m
[36m@@ -164,7 +163,8 @@[m [mBlankE = {[m
 	init = function(first_state, in_options)[m
 		options = {[m
 			window_size = 3,[m
[31m-			plugins={}[m
[32m+[m			[32mplugins={},[m
[32m+[m			[32mfilter="linear"[m
 		}[m
 		table.update(options, in_options)[m
 [m
[36m@@ -187,10 +187,18 @@[m [mBlankE = {[m
 				BlankE.injectCallbacks()[m
 			end[m
 		end[m
[32m+[m[41m		[m
[32m+[m		[32m-- parsing all options[m
[32m+[m		[32mif type(options.filter) == "table" then[m
[32m+[m			[32mlove.graphics.setDefaultFilter(unpack(options.filter))[m
[32m+[m		[32melse[m
[32m+[m			[32mlove.graphics.setDefaultFilter(options.filter, options.filter)[m
[32m+[m		[32mend[m
 [m
 	    uuid.randomseed(love.timer.getTime()*10000)[m
 	    updateGlobals(0)[m
 [m
[32m+[m		[32mWindow.setResolution(options.window_size, nil, true)[m
 		Asset.add('assets', nil, true)[m
 		Asset.add('scripts', nil, true)[m
 		Asset.add('scenes', nil, true)[m
[36m@@ -208,8 +216,6 @@[m [mBlankE = {[m
 		end[m
 		State.switch(first_state)  [m
 [m
[31m-		Window.setResolution(options.window_size, nil, true)[m
[31m-[m
 		BlankE._is_init = true[m
 	end,[m
 [m
[1mdiff --git a/love2d/lua/blanke/Canvas.lua b/love2d/lua/blanke/Canvas.lua[m
[1mindex b84ed45..cd46a09 100644[m
[1m--- a/love2d/lua/blanke/Canvas.lua[m
[1m+++ b/love2d/lua/blanke/Canvas.lua[m
[36m@@ -11,7 +11,7 @@[m [mCanvas = Class{[m
         [m
         self.active = false[m
         self.auto_clear = true[m
[31m-        self.clear_color = {1,1,1,0}[m
[32m+[m[32m        self.clear_color = nil[m
         self._prev_canvas = nil[m
         [m
         _addGameObject('canvas',self)[m
[1mdiff --git a/love2d/lua/blanke/Effect.lua b/love2d/lua/blanke/Effect.lua[m
[1mindex f021c9e..33978f7 100644[m
[1m--- a/love2d/lua/blanke/Effect.lua[m
[1m+++ b/love2d/lua/blanke/Effect.lua[m
[36m@@ -2,7 +2,7 @@[m
 completely working effects:[m
  - chroma shift : angle(rad), radius[m
  - crt : lineSize(vec2) opacity, scanlines(bool), distortion, inputGamma, outputGamma[m
[31m- - [m
[32m+[m[32m - outline : size[m
 ]][m
 Effect = Class{[m
     _mouse_offx = 0,[m
[36m@@ -54,24 +54,17 @@[m [mEffect = Class{[m
         canvas = ifndef(canvas, self.canvas)[m
 [m
         local curr_shader = love.graphics.getShader()[m
[31m-        local curr_color = {love.graphics.getColor()}[m
         local curr_blend = love.graphics.getBlendMode()[m
 [m
[31m-        self.canvas:drawTo(function()[m
[31m-            love.graphics.setBlendMode('alpha', 'premultiplied')[m
[31m-            love.graphics.setShader(shader)[m
[32m+[m[32m        canvas:drawTo(function()[m[41m    [m
             func()[m
[31m-            love.graphics.setShader()[m
[31m-            love.graphics.setBlendMode(curr_blend)[m
         end)[m
[31m-        self.canvas:draw()[m
 [m
[31m-        love.graphics.setBlendMode(curr_blend)[m
[31m---[[[m
[31m-        love.graphics.setColor(curr_color)[m
         love.graphics.setShader(shader)[m
[31m-        love.graphics.setBlendMode('alpha', 'premultiplied')[m
[31m-]][m
[32m+[m[32m        love.graphics.setBlendMode('alpha', 'premultiplied')[m[41m    [m
[32m+[m[32m        canvas:draw()[m
[32m+[m[32m        love.graphics.setBlendMode(curr_blend)[m
[32m+[m[32m        love.graphics.setShader(curr_shader)[m
     end,[m
 [m
     applyParams = function(self)[m
[36m@@ -309,15 +302,12 @@[m [mvec4 effect(vec4 color, Image tex, vec2 tc, vec2 sc)[m
 }[m
 [m
 EffectManager.new{[m
[31m-    name = 'crt',[m
[32m+[m[32m    name = 'chroma shift',[m
     params = {['angle']=0,['radius']=50,['direction']={0,0}},--['strength'] = {1, 1}, ['size'] = {20, 20}},[m
     effect = [[[m
             pixel.r = Texel(texture, texCoord - direction).r; [m
             pixel.b = Texel(texture, texCoord + direction).b; [m
[31m-            pixel.a = Texel(texture, texCoord).a;[m
[31m-            [m
[31m-            if (Texel(texture, texCoord - direction).a > 0 || Texel(texture, texCoord + direction).a > 0)[m
[31m-                pixel.a = 1.0; [m
[32m+[m[32m            pixel.a = Texel(texture, texCoord).a;[m[41m [m
     ]],[m
     draw = function(self, draw)[m
         local angle, radius = self.angle, self.radius[m
[36m@@ -456,5 +446,29 @@[m [mEffectManager.new{[m
     end[m
 }[m
 [m
[32m+[m[32mEffect.new{[m
[32m+[m[32m    name="outline",[m
[32m+[m[32m    params={size=1},[m
[32m+[m[32m    effect=[[[m
[32m+[m[32m        float incr = 1.0 / love_ScreenSize.x;[m
[32m+[m[32m        float max = size / love_ScreenSize.x;[m
[32m+[m[41m        [m
[32m+[m[32m        vec4 pixel_l, pixel_r, pixel_u, pixel_d, pixel_lu, pixel_ru, pixel_ld, pixel_rd;[m
[32m+[m[32m        for (float s = 0; s < max; s += incr) {[m
[32m+[m[32m            pixel_l = Texel(texture, vec2(texCoord.x-s, texCoord.y));[m
[32m+[m[32m            pixel_r = Texel(texture, vec2(texCoord.x+s, texCoord.y));[m
[32m+[m[32m            pixel_u = Texel(texture, vec2(texCoord.x, texCoord.y-s));[m
[32m+[m[32m            pixel_d = Texel(texture, vec2(texCoord.x, texCoord.y+s));[m
[32m+[m[41m    [m
[32m+[m[32m            pixel_lu = Texel(texture, vec2(texCoord.x-s, texCoord.y-s));[m
[32m+[m[32m            pixel_ru = Texel(texture, vec2(texCoord.x-s, texCoord.y+s));[m
[32m+[m[32m            pixel_ld = Texel(texture, vec2(texCoord.x+s, texCoord.y-s));[m
[32m+[m[32m            pixel_rd = Texel(texture, vec2(texCoord.x+s, texCoord.y+s));[m
[32m+[m
[32m+[m[32m            if (pixel.a == 0 && (pixel_l.a > 0 || pixel_r.a > 0 || pixel_u.a > 0 || pixel_d.a > 0 || pixel_lu.a > 0 || pixel_ru.a > 0 || pixel_ld.a > 0 || pixel_rd.a > 0))[m[41m [m
[32m+[m[32m                pixel = vec4(1,0,0,1);[m
[32m+[m[32m        }[m
[32m+[m[32m    ]][m
[32m+[m[32m}[m
 [m
 return Effect[m
\ No newline at end of file[m
[1mdiff --git a/love2d/lua/blanke/Tween.lua b/love2d/lua/blanke/Tween.lua[m
[1mindex 8defdd9..8234bef 100644[m
[1m--- a/love2d/lua/blanke/Tween.lua[m
[1m+++ b/love2d/lua/blanke/Tween.lua[m
[36m@@ -17,13 +17,13 @@[m [mTween = Class{[m
 	},[m
 [m
 	init = function(self, var, value, duration, func_type)[m
[31m-		self.var = var[m
 		self.duration = ifndef(duration, 1)[m
 		self.type = ifndef(func_type, 'linear')[m
 		self.valid = true[m
 		self.running = false[m
 [m
[31m-		self:setValue(value)[m
[32m+[m		[32mself:setStartValue(var)[m
[32m+[m		[32mself:setEndValue(value)[m
 [m
 		self:reset()[m
 		self._func = Tween.tween_func[self.type][m
[36m@@ -32,7 +32,11 @@[m [mTween = Class{[m
 		_addGameObject('tween', self)[m
 	end,[m
 [m
[31m-	setValue = function(self, value)[m
[32m+[m	[32msetStartValue = function(self, val)[m
[32m+[m		[32mself.var = val[m
[32m+[m	[32mend,[m
[32m+[m
[32m+[m	[32msetEndValue = function(self, value)[m
 		-- get whether an object is changing or single var[m
 		self.value = value[m
 		self._multival = false[m
[36m@@ -66,12 +70,7 @@[m [mTween = Class{[m
 [m
 					-- finished?[m
 					if (start_value < value and self.var[key] < value) or (start_value > value and self.var[key] > value) then[m
[31m-						local dir = math.sign(start_value - value)[m
[31m-						if dir < 0 then -- increasing[m
[31m-							self.var[key] = self._func(start_value, value-start_value, self.duration*1000, self._dt*1000)[m
[31m-						elseif dir > 0 then -- decreasing[m
[31m-							self.var[key] = (value-start_value) - self._func(value-start_value, start_value, self.duration*1000, self._dt*1000)[m
[31m-						end[m
[32m+[m						[32mself.var[key] = self._func(warning: LF will be replaced by CRLF in projects/boredom/main.lua.
The file will have its original line endings in your working directory.
start_value, value-start_value, self.duration*1000, self._dt*1000)[m
 					end[m
 				end[m
 [m
[1mdiff --git a/love2d/lua/blanke/View.lua b/love2d/lua/blanke/View.lua[m
[1mindex 40e264c..4756722 100644[m
[1m--- a/love2d/lua/blanke/View.lua[m
[1m+++ b/love2d/lua/blanke/View.lua[m
[36m@@ -25,12 +25,26 @@[m [mView = Class{[m
         -- lockX[m
         self.lock_rect = {0,0,w,h}[m
 [m
[32m+[m[32m        -- shake variables[m
[32m+[m[32m        self.shake_type = 'smooth'[m
[32m+[m[32m        self.shake_x = 0[m
[32m+[m[32m        self.shake_y = 0[m
[32m+[m[32m        self.shake_tween = nil[m
[32m+[m[32m        self.shake_speed = 15[m
[32m+[m[32m        self.shake_duration = 1 -- seconds[m
[32m+[m
         self.angle = 0[m
         self.scale_x = 1[m
         self.scale_y = 1[m
 [m
         self._half_w, self._half_h = math.floor(w/2), math.floor(h/2)[m
 [m
[32m+[m[32m        self.onPropSet['zoom'] = function(self, v)[m
[32m+[m[41m        [m	[32mself.scale_x = v[m
[32m+[m[41m        [m	[32mself.scale_y = v[m
[32m+[m[41m    [m	[32mend[m
[32m+[m[41m    [m	[32mself.onPropGet['zoom'] = function() return 1 end[m
[32m+[m
         _addGameObject('view',self)[m
 	end,[m
 [m
[36m@@ -38,14 +52,6 @@[m [mView = Class{[m
 		return cond(self.port_width >= 0, self.port_width, self._port_w), cond(self.port_height >= 0, self.port_height, self._port_h)[m
 	end,[m
 [m
[31m-	zoom = function(self, x, y, cb_finish)[m
[31m-		y = ifndef(y, x)[m
[31m-		self.scale_x = x[m
[31m-		self.scale_y = y[m
[31m-[m
[31m-		if cb_finish then cb_finish() end[m
[31m-	end,[m
[31m-[m
 	follow = function(self, entity)[m
 		self.follow_entity = entity[m
 	end,[m
[36m@@ -55,6 +61,23 @@[m [mView = Class{[m
 [m
 	end,[m
 [m
[32m+[m	[32mshake = function(self, x, y)[m
[32m+[m
[32m+[m		[32mif self.shake_tween == nil then[m[41m [m
[32m+[m			[32mDebug.log("hiiiii")[m
[32m+[m			[32mself.shake_x = x[m
[32m+[m			[32mself.shake_y = y[m
[32m+[m			[32mself.shake_tween = Tween(self, {shake_x=0, shake_y=0}, self.shake_duration)[m
[32m+[m			[32mself.shake_tween.onFinish = function()[m
[32m+[m				[32mself.shake_tween:destroy()[m
[32m+[m				[32mself.shake_tween = nil[m
[32m+[m			[32mend[m
[32m+[m			[32mself.shake_tween:play()[m
[32m+[m		[32mend[m
[32m+[m
[32m+[m		[32mreturn self[m
[32m+[m	[32mend,[m
[32m+[m
 	update = function(self, dt)[m
 		self._port_w = game_width[m
 		self._port_h = game_height[m
[36m@@ -66,11 +89,24 @@[m [mView = Class{[m
 			follow_x, follow_y = self.x, self.y[m
 		end[m
 [m
[31m-		local target_x = follow_x + self.offset_x[m
[31m-		local target_y = follow_y + self.offset_y[m
[32m+[m		[32m-- shake calculations[m
[32m+[m		[32mlocal shake_x, shake_y = 0, 0[m
[32m+[m
[32m+[m		[32mif self.shake_x > 0 then[m
[32m+[m			[32mif self.shake_type == 'smooth' then[m
[32m+[m				[32mshake_x = sinusoidal(-self.shake_x, self.shake_x, self.shake_speed, self.shake_x / 2)[m
[32m+[m			[32mend[m
[32m+[m		[32mend[m
[32m+[m		[32mif self.shake_y > 0 then[m
[32m+[m			[32mif self.shake_type == 'smooth' then[m
[32m+[m				[32mshake_y = sinusoidal(-self.shake_y, self.shake_y, self.shake_speed, self.shake_y / 2)[m
[32m+[m			[32mend[m
[32m+[m		[32mend[m
 [m
[31m-		-- do transitional tween stuff[m
[32m+[m		[32mlocal target_x = follow_x + self.offset_x + shake_x[m
[32m+[m		[32mlocal target_y = follow_y + self.offset_y + shake_y[m
 [m
[32m+[m[41m		[m
 		self.x = math.floor(target_x)[m
 		self.y = math.floor(target_y)[m
 [m
[1mdiff --git a/projects/boredom/scripts/PlayState.lua b/projects/boredom/scripts/PlayState.lua[m
[1mindex be03d9e..056f692 100644[m
[1m--- a/projects/boredom/scripts/PlayState.lua[m
[1m+++ b/projects/boredom/scripts/PlayState.lua[m
[36m@@ -33,6 +33,11 @@[m [mfunction PlayState:update(dt)[m
 end[m
 [m
 function PlayState:draw()[m
[32m+[m	[32mif Input("action").released then[m
[32m+[m		[32mmain_cawarning: LF will be replaced by CRLF in projects/boredom/scripts/PlayState.lua.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in projects/foodcart/scripts/Penguin.lua.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in projects/foodcart/scripts/PlayState.lua.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in projects/foodcart/scripts/hacker.lua.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in projects/foodcart/scripts/npc.lua.
The file will have its original line endings in your working directory.
mera:shake(0,10)[m[41m	[m
[32m+[m	[32mend[m
[32m+[m	[32mmain_camera.shake_speed = (mouse_x / game_width) * 50[m
[32m+[m[41m	[m
 	main_camera:draw(function()[m
 		Scene.instances:call('draw')[m
 		player:draw()[m
[1mdiff --git a/projects/foodcart/scripts/Penguin.lua b/projects/foodcart/scripts/Penguin.lua[m
[1mindex 6f85799..1ed94c1 100644[m
[1m--- a/projects/foodcart/scripts/Penguin.lua[m
[1m+++ b/projects/foodcart/scripts/Penguin.lua[m
[36m@@ -60,5 +60,5 @@[m [mend[m
 function Penguin:draw()		[m
 	self:drawSprite('walk')[m
 	self:drawSprite('walk_fill')[m
[31m-	--self:drawSprite("eyes")[m
[32m+[m	[32mself:drawSprite("eyes")[m
 end[m
\ No newline at end of file[m
[1mdiff --git a/projects/foodcart/scripts/PlayState.lua b/projects/foodcart/scripts/PlayState.lua[m
[1mindex dad4f71..232dfef 100644[m
[1m--- a/projects/foodcart/scripts/PlayState.lua[m
[1m+++ b/projects/foodcart/scripts/PlayState.lua[m
[36m@@ -4,11 +4,8 @@[m [mlocal everything = Group()[m
 local player[m
 [m
 [m
[31m-local eff_selected = Effect("crt")[m
[31m-[m
 function PlayState:enter()[m
 	placeObjects()[m
[31m-	Draw.setBackgroundColor("brown")[m
 end[m
 [m
 function placeObjects()	[m
[36m@@ -28,8 +25,5 @@[m [mfunction PlayState:update(dt)[m
 end[m
 [m
 function PlayState:draw()[m
[31m-	eff_selected.radius = (mouse_x / game_width) * 200[m
[31m-	eff_selected:draw(function()[m
[31m-		everything:call("draw")[m
[31m-	end)[m
[32m+[m	[32meverything:call("draw")[m
 end[m
\ No newline at end of file[m
[1mdiff --git a/projects/foodcart/scripts/hacker.lua b/projects/foodcart/scripts/hacker.lua[m
[1mindex 3c9c229..b3e3464 100644[m
[1m--- a/projects/foodcart/scripts/hacker.lua[m
[1m+++ b/projects/foodcart/scripts/hacker.lua[m
[36m@@ -11,16 +11,16 @@[m [mend[m
 function Hacker:update(dt)[m
 	-- movement[m
 	local dx, dy = 0, 0[m
[31m-	if Input("move_l") > 0 then[m
[32m+[m	[32mif Input("move_l").pressed then[m
 		dx = dx - self.move_speed[m
 	end[m
[31m-	if Input("move_r") > 0 then[m
[32m+[m	[32mif Input("move_r").pressed then[m
 		dx = dx + self.move_speed[m
 	end[m
[31m-	if Input("move_u") > 0 then[m
[32m+[m	[32mif Input("move_u").pressed then[m
 		dy = dy - self.move_speed[m
 	end[m
[31m-	if Input("move_d") > 0 then[m
[32m+[m	[32mif Input("move_d").pressed then[m
 		dy = dy + self.move_speed[m
 	end[m
 	[m
[1mdiff --git a/projects/foodcart/scripts/npc.lua b/projects/foodcart/scripts/npc.lua[m
[1mindex d4ddc72..a6e41de 100644[m
[1m--- a/projects/foodcart/scripts/npc.lua[m
[1m+++ b/projects/foodcart/scripts/npc.lua[m
[36m@@ -1,7 +1,7 @@[m
 BlankE.addEntity("Npc")[m
 [m
 local NPC_TYPE = {NONE=1} -- has other virus names[m
[31m-local eff_selected = Effect("crt")[m
[32m+[m[32mlocal eff_selected = Effect("chroma shift")[m
 [m
 function Npc:init()[m
 	self.penguin = Penguin()[m
[36m@@ -65,16 +65,14 @@[m [mfunction Npc:update(dt)[m
 end[m
 [m
 function Npc:draw()	[m
[31m-	if false then[m
[32m+[m	[32mlocal dist = self.penguin:distancePoint(mouse_x, mouse_y)[m
[32m+[m[41m	[m
[32m+[m	[32mif true then --dist < 100 then[m
[32m+[m		[32meff_selected.radius = dist / 20[m
 		eff_selected:draw(function()[m
 			self.penguin:draw()[m
 		end)[m
[31m-	end[m
[31m-		-- self.selected = false[m
[31m-	self.penguin:draw()[m
[31m-	[m
[31m-	if UI.mouseInside(self.penguin.x - 16, self.penguin.y, 32, 32) then[m
[31m-		Draw.setColor("black")[m
[31m-		Draw.text(self.type)[m
[32m+[m	[32melse[m
[32m+[m		[32mself.penguin:draw()[m
 	end[m
 end[m
[1mdiff --git a/projects/test zone/scripts/TestState.lua b/projects/test zone/scripts/TestState.lua[m
[1mindex 299f2df..8c89d7e 100644[m
[1m--- a/projects/test zone/scripts/TestState.lua[m	
[1m+++ b/projects/test zone/scripts/TestState.lua[m	
[36m@@ -1,23 +1,34 @@[m
 BlankE.addState("TestState");[m
 [m
[31m-local img_penguin[m
[32m+[m[32mlocal img_penguin, img_sheet[m
 local my_eff[m
 [m
 function TestState:enter()[m
 	img_penguin = Image("Basic Bird")[m
[32m+[m	[32mimg_sheet = Image("sprite-example")[m
[32m+[m
 	Effect.new{[m
 		name="outline",[m
[31m-		params={size=0.1},[m
[32m+[m		[32mparams={size=1},[m
 		effect=[[[m
[31m-			vec4 pixel_l = Texel(texture, vec2(texCoord.x-size, texCoord.y));[m
[31m-			vec4 pixel_r = Texel(texture, vec2(texCoord.x+size, texCoord.y));[m
[31m-			vec4 pixel_u = Texel(texture, vec2(texCoord.x, texCoord.y-size));[m
[31m-			vec4 pixel_d = Texel(texture, vec2(texCoord.x, texCoord.y+size));[m
[31m-		[m
[31m-			[m
[31m-			if (pixel.a == 0 && (pixel_l.a > 0 || pixel_r.a > 0 || pixel_u.a > 0 || pixel_d.a > 0)) [m
[31m-				pixel = vec4(1,0,0,1);[m
[32m+[m			[32mfloat incr = 1.0 / love_ScreenSize.x;[m
[32m+[m			[32mfloat max = size / love_ScreenSize.x;[m
 			[m
[32m+[m			[32mvec4 pixel_l, pixel_r, pixel_u, pixel_d, pixel_lu, pixel_ru, pixel_ld, pixel_rd;[m
[32m+[m			[32mfor (float s = 0; s < max; s += incr) {[m
[32m+[m				[32mpixel_l = Texel(texture, vec2(texCoord.x-s, texCoord.y));[m
[32m+[m				[32mpixel_r = Texel(texture, vec2(texCoord.x+s, texCoord.y));[m
[32m+[m				[32mpixel_u = Texel(texture, vec2(texCoord.x, texCoord.y-s));[m
[32m+[m				[32mpixel_d = Texel(texture, vec2(texCoord.x, texCoord.y+s));[m
[32m+[m[41m		[m
[32m+[m				[32mpixel_lu = Texel(texture, vec2(texCoord.x-s, texCoord.y-s));[m
[32m+[m				[32mpixel_ru = Texel(texture, vec2(texCoord.x-s, texCoord.y+s));[m
[32m+[m				[32mpixel_ld = Texel(texture, vec2(texCoord.x+s, texCoord.y-s));[m
[32m+[m				[32mpixel_rd = Texel(texture, vec2(texCoord.x+s, texCoord.y+s));[m
[32m+[m
[32m+[m				[32mif (pixel.a == 0 && (pixel_l.a > 0 || pixel_r.a > 0 || pixel_u.a > 0 || pixel_d.a > 0 || pixel_lu.a > 0 || pixel_ru.a > 0 || pixel_ld.a > 0 || pixel_rd.a > 0))[m[41m [m
[32m+[m					[32mpixel = vec4(1,0,0,1);[m
[32m+[m			[32m}[m
 		]][m
 	}[m
 	my_eff = Effect("outline")[m
[36m@@ -28,14 +39,19 @@[m [mfunction TestState:update(dt)[m
 end[m
 [m
 function TestState:draw()[m
[32m+[m	[32mmy_eff.size = (mouse_x / game_width) * 20;[m
[32m+[m[41m	[m
 	Draw.setColor("red")[m
[31m-	Draw.text(mouse_x / game_width, 50, 50)[m
[32m+[m	[32mDraw.text(my_eff.size, 50, 50)[m
 	Draw.reset("color")[m
 	[m
[31m-	my_eff:send('size',mouse_x / game_width)[m
 	my_eff:draw(function()[m
 		img_penguin.x = game_width / 2[m
 		img_penguin.y = game_height / 2[m
 		img_penguin:draw()[m
[32m+[m[41m			[m
[32m+[m		[32mDraw.setColor("blue")[m
[32m+[m		[32mDraw.circle("line",100,100,50)[m
[32m+[m		[32mDraw.reset("color")[m
 	end)[m
 end[m
[1mdiff --git a/src/autocomplete.js b/src/autocomplete.js[m
[1mindex 2fb8c34..2a526be 100644[m
[1m--- a/src/autocomplete.js[m
[1m+++ b/src/autocomplete.js[m
[36m@@ -28,7 +28,7 @@[m [mmodule.exports.instance_regex = {[m
 		/\b(\w+)\s*=\s*<class_name>\.instances\[\d+\].*/g[m
 	],[m
 	'input': 	/\b(Input\([\'\"]\w+[\'\"]\))/g,[m
[31m-	'image': 	/\b(\w+)\s*=\s*Image\([\'\"][\w\.\s]+[\'\"]\)\s+?/g,[m
[32m+[m	[32m'image': 	/\b(\w+)\s*=\s*Image\([\'\"].+[\'\"]\)\s+?/g,[m
 	'scene': 	/\b(\w+)\s*=\s*Scene\([\'\"]?[\w\.]+[\'\"]?\)\s+?/g,[m
 	'audio': 	/\b(\w+)\s*=\s*Audio\([\'\"][\w\.\s]+[\'\"]\)\s+?/g,[m
 	'view': 	/\b(\w+)\s*=\s*View\([\w\.\s]+\)\s+?/g,[m
[36m@@ -257,8 +257,17 @@[m [mmodule.exports.completions = {[m
 		{prop:"orig_height", info:"read-only"},[m
 		{prop:"width"},[m
 		{prop:"height"},[m
[31m-		{fn:"draw"},[m
[31m-		{fn:"crop",vars:{x:"",y:"",width:"",height:""}}[m
[32m+[m		[32m{fn:"draw",vars:{x:"opt. override",y:"opt. override"}},[m
[32m+[m		[32m{fn:"crop",vars:{x:"",y:"",width:"",height:""}},[m
[32m+[m		[32m{fn:"chop",vars:{piece_w:"",piece_h:""},info:"returns Group containing parts of the Image"},[m
[32m+[m		[32m{fn:"combine",vars:{other_image:""},info:"combines another image into this one"},[m
[32m+[m		[32m{fn:"setWidth",vars:{w:""}},[m
[32m+[m		[32m{fn:"setHeight",vars:{h:""}},[m
[32m+[m		[32m{fn:"setSize",vars:{w:"",h:""}},[m
[32m+[m		[32m{fn:"setScale",vars:{xwarning: LF will be replaced by CRLF in projects/test zone/scripts/TestState.lua.
The file will have its original line endings in your working directory.
:"",y:"optional"}},[m
[32m+[m		[32m{fn:"tileX",vars:{w:""}},[m
[32m+[m		[32m{fn:"tileY",vars:{h:""}},[m
[32m+[m		[32m{fn:"tile",vars:{w:"",h:""}}[m
 	],[m
 	"blanke-audio-instance":[[m
 		{prop:"pitch"},[m
[36m@@ -311,12 +320,15 @@[m [mmodule.exports.completions = {[m
 		{prop:"scale_y"},[m
 		{prop:"port_width"},[m
 		{prop:"port_height"},[m
[32m+[m		[32m{prop:"zoom"},[m
[32m+[m		[32m{fn:"shake",vars:{x:"",y:"optional"}},[m
[32m+[m		[32m{prop:"shake_speed"},[m
[32m+[m		[32m{prop:"shake_duration",info:{"seconds"}},[m
 		{prop:"top",info:"read only"},[m
 		{prop:"bottom",info:"read only"},[m
 		{prop:"left",info:"read only"},[m
 		{prop:"right",info:"read only"},[m
 		{fn:"follow",vars:{ entity_instance:'' }},[m
[31m-		{fn:"zoom",vars:{ x:'', y:'' }},[m
 		{fn:"draw",vars:{ draw_fn:'' }}[m
 	],[m
 	"blanke-repeater-instance":[[m
[1mdiff --git a/src/index.html b/src/index.html[m
[1mindex 0970a60..4464d58 100644[m
[1m--- a/src/index.html[m
[1m+++ b/src/index.html[m
[36m@@ -2,7 +2,7 @@[m
 <html>[m
 	<head>[m
 		<script type="text/javascript">[m
[31m-			var DEV_MODE = false;[m
[32m+[m			[32mvar DEV_MODE = true;[m
 			if (DEV_MODE) require('nw.gui').Window.get().showDevTools();[m
 		</script>[m
 [m
[1mdiff --git a/src/main.css b/src/main.css[m
[1mindex cc82cfe..e95f94d 100644[m
[1m--- a/src/main.css[m
[1m+++ b/src/main.css[m
[36m@@ -1766,7 +1766,7 @@[m [mbody:after {[m
   background-color: rgba(0, 0, 0, 0.5);[m
 }[m
 .tool-container button .blanke-icon {[m
[31m-  opacity: .75;[m
[32m+[m[32m  opacity: 0.75;[m
   pointer-events: none;[m
   transition: all ease-in-out 0.2s;[m
 }[m
[36m@@ -2456,7 +2456,7 @@[m [mbody:after {[m
 }[m
 .crosshair .x,[m
 .crosshair .y {[m
[31m-  animation-duration: .5s;[m
[32m+[m[32m  animation-duration: 0.5s;[m
   animation-name: crosshair-fade-out;[m
 }[m
 @keyframes crosshair-fade-out {[m
warning: LF will be replaced by CRLF in src/main.css.
The file will have its original line endings in your working directory.
